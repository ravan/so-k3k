_version: 1.0.85
nodes:
  - _type: ComponentMappingFunction
    id: -1
    identifier: urn:stackpack:kubernetes-v2:shared:component-mapping-function:kubernetes-k3k-generic-component-mapping-function
    name: Kubernetes K3K generic component mapping function
    parameters: []
    script:
      _type: ScriptFunctionBody
      scriptBody: |
        labels = new ArrayList()
        layer = "urn:stackpack:common:layer:uncategorized"
        
        if (!element.data.containsKey("tags")) {
          element.data.put("tags", [:])
        }
        
        if (!element.data.containsKey("properties")) {
            element.data.put("properties", [:])
        }
        
        extraConditions = []
        if (element.data.tags.containsKey("cluster-name")) {
            def clusterName = element.data.tags["cluster-name"]
            extraConditions << [ "key": "tags.cluster_name", "value": clusterName ]
        
            element.data.properties.put("clusterNameIdentifier", "urn:cluster:/kubernetes:${clusterName}".toString())
        }
        if (element.data.tags.containsKey("namespace")) {
            extraConditions << [ "key": "tags.namespace", "value": element.data.tags["namespace"] ]
        }
        
        if (element.data.tags.containsKey("cluster-name") && element.data.tags.containsKey("namespace")) {
            def clusterName = element.data.tags["cluster-name"]
            def namespace = element.data.tags["namespace"]
            element.data.properties.put("namespaceIdentifier", "urn:kubernetes:/${clusterName}:namespace/${namespace}".toString())
        }
        
        labels << 'stackpack:kubernetes'
        
        // Copy SUSE Observability monitor annotations to component properties for usage in monitors
        if (element.sourceProperties?.metadata?.annotations) {
            element.sourceProperties?.metadata?.annotations.each { key, value ->
                def groups = key =~ /^monitor.([a-zA-Z0-9-]+).stackstate.io\/(.+)$/
                if (groups) {
                    // Build the key for the property that denotes the identifier/overrides property
                    switch (groups[0][1]){
                        case "kubernetes-v2":
                            element.data.properties.put("urn:stackpack:kubernetes-v2:shared:monitor:kubernetes-v2:"+groups[0][2]+"/overrides", value)
                            break;
                        case "custom":
                            element.data.properties.put("urn:custom:monitor:"+groups[0][2]+"/overrides", value)
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        
        static def extractOwner(element) {
            def ownerKind;
            def ownerIdentifier;
            def owner = element.sourceProperties?.metadata?.ownerReferences?.find { true }
            if (owner && owner.controller && element.data.tags?.containsKey("cluster-name") && (element.data.tags.containsKey("namespace"))) {
                switch (owner.kind) {
                    case 'DaemonSet':
                        ownerKind = 'daemonset'
                        break
                    case 'StatefulSet':
                        ownerKind = 'statefulset'
                        break
                    case 'ReplicaSet':
                        ownerKind = 'replicaset'
                        break
                    case 'Deployment':
                        ownerKind = 'deployment'
                        break
                    case 'Job':
                        ownerKind = 'job'
                        break
                    case 'CronJob':
                        ownerKind = 'cronjob'
                        break
                }
        
                if (ownerKind) {
                    element.data.properties.put("ownerName", owner.name)
                    def clusterName = element.data.tags["cluster-name"]
                    def namespace = element.data.tags["namespace"]
                    ownerIdentifier = "urn:kubernetes:/${clusterName}:${namespace}:${ownerKind}/${owner.name}".toString()
                    return [ "ownerName": owner.name.toString(), "ownerKind": ownerKind.toString(), "ownerIdentifier": ownerIdentifier]
                }
            }
        
            return null;
        }
      
  
        def tagHasValue(tagName, value) {
          return (element.data.tags.containsKey(tagName) && element.data.tags[tagName] == value)
        }
        
        switch (element.type.name) {
            case 'node':
                layer = 'urn:stackpack:common:layer:nodes'
                if(tagHasValue("type", "virtual-kubelet") && tagHasValue("kubernetes.io/role", "agent")) {
                    layer = 'urn:stackpack:common:layer:virtualnodes'
                }
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                clusterConditions = []
                if(element.data.tags.containsKey("cluster-name")) {
                    clusterConditions << [ "key": "tags.cluster_name", "value": element.data.tags["cluster-name"] ]
                }
        
                clusterAltConditions = []
                if(element.data.tags.containsKey("cluster-name")) {
                    clusterAltConditions << ["key": "tags.cluster_name", "value": element.data.tags["cluster-name"]]
                }
        
                if (element.data.containsKey("sts_host")) {
                    element.data.properties.put("sts_host", element.data.sts_host)
                } else if (element.data.containsKey("instanceId")) {
                    element.data.properties.put("sts_host", element.data.instanceId)
                }
        
                def allLabels = element.sourceProperties?.metadata?.labels
                if (allLabels != null) {
                    def NODE_LABEL_PREFIX = "node-role.kubernetes.io\\/(.+)"
                    def nodeRoles = allLabels.inject([], { acc, label ->
                        def matcher = (label.key =~ NODE_LABEL_PREFIX)
        
                        if (matcher.matches()) {
                            acc << matcher[0][1]
                        }
        
                        acc
                    }).join(", ")
        
                    if (nodeRoles) {
                        element.data['properties'].put('nodeRole', nodeRoles)
                    }
                }
        
                def allocatableCpu = element.sourceProperties?.status?.allocatable?.cpu
                if (allocatableCpu != null) {
                    // Cpu in millicores
                    element.data['properties'].put('allocatableCpu', K8sQuantity.parse(allocatableCpu).formatMillicores())
                }
        
                def allocatableMemory = element.sourceProperties?.status?.allocatable?.memory
                if (allocatableMemory != null) {
                    // Memory in Mi
                    element.data['properties'].put('allocatableMemory', K8sQuantity.parse(allocatableMemory).formatMi())
                }
        
                def kubeletVersion = element.sourceProperties?.status?.nodeInfo?.kubeletVersion
                if (kubeletVersion != null) {
                    element.data['properties'].put('kubeletVersion', kubeletVersion)
                }
        
                def addresses = element.sourceProperties?.status?.addresses;
                if (addresses != null) {
                    def internalIPAddress = addresses.find { it.type == "InternalIP" }
                    if (internalIPAddress != null) {
                        element.data['properties'].put('internalIP', internalIPAddress.address)
                    }
                    def externalIPAddress = addresses.find { it.type == "ExternalIP" }
                    if (externalIPAddress != null) {
                        element.data['properties'].put('externalIP', externalIPAddress.address)
                    }
                    def hostnameAddress = addresses.find { it.type == "Hostname" }
                    if (hostnameAddress != null) {
                        element.data['properties'].put('hostname', hostnameAddress.address)
                    }
                }
        
                def nodeStatus = "NotReady"
                def conditions = element.sourceProperties?.status?.conditions
                if (conditions != null) {
                    nodeStatus = conditions.inject(nodeStatus, { finalNodeStatus, condition ->
                        if (condition.type == "Ready") {
                            return condition.status == "True"? "Ready" : "NotReady"
                        } else {
                            return finalNodeStatus
                        }
                    });
                }
                // Take a look at the spec to check if the node has been tainted as unschedulable
                def isUnschedulable = element.sourceProperties?.spec?.unschedulable
                if (isUnschedulable != null && isUnschedulable == true) {
                    nodeStatus += ",SchedulingDisabled"
                }
        
                element.data['properties'].put('status', nodeStatus)
        
                break
            case 'container':
                layer = 'urn:stackpack:common:layer:containers'
                if (element.data?.pod) {
                    labels << "pod-name:" + element.data.pod
                }
                if (element.data.docker) {
                    element.data['properties'].put('image', element.data.docker.image)
                    element.data['properties'].put('imageID', element.data.docker.imageId)
                }
                if (element.data.containsKey("exitCode")) {
                    element.data['properties'].put("exitCode", element.data["exitCode"])
                }
                break
            case 'service':
                layer = 'urn:stackpack:common:layer:services'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def clusterIP = element.sourceProperties?.spec?.clusterIP
                if (clusterIP != null) {
                    element.data['properties'].put('clusterIP', clusterIP)
                }
                def ingress = element.sourceProperties?.status?.loadBalancer?.ingress
                if (ingress != null) {
                    if (ingress[0]?.hostname) {
                        element.data['properties'].put('externalIP', ingress[0].hostname)
                    }
                    if (ingress[0]?.ip) {
                        element.data['properties'].put('externalIP', ingress[0].ip)
                    }
                }
                def serviceType = element.sourceProperties?.spec?.type
                if (serviceType != null) {
                    element.data['properties'].put('serviceType', serviceType)
                }
                def selector = element.sourceProperties?.spec?.selector
                if (selector != null && selector instanceof Map) {
                    selector.each { selectorEntry ->
                        // Okey here it goes. These are properties that can be used using the __multi__ binding in metricbindings to match
                        // the pod metric labels produced by the correlator. Allowing to select metrics using service selector at metric query time.
                        def labelKey = selectorEntry.key.toString()
                        def metricLabelKey = labelKey.replaceAll("[^a-zA-Z0-9]", "_") // Make the label key compatible with promql labels.
                        // Property selector for source pods
                        element.data["properties"].put("local_pod_metric_selector__local_pod_label_$metricLabelKey", selectorEntry.value.toString())
                        // Property selector for target pods
                        element.data["properties"].put("remote_pod_metric_selector__remote_pod_label_$metricLabelKey", selectorEntry.value.toString())
                        // Property selector with unescaped keys, for open telemetry attributes compatibility
                        element.data["properties"].put("pod_otel_selector__$labelKey", selectorEntry.value.toString())
                    }
                }
                break
            case 'pod':
                layer = 'urn:stackpack:common:layer:pods'
                if(tagHasValue("role", "server")) {
                    layer = 'urn:stackpack:common:layer:k3kservers'
                }
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def nodeName = element.sourceProperties?.spec?.nodeName
                if (nodeName != null) {
                    element.data['properties'].put('nodeName', nodeName)
                    labels << 'node-name:'+nodeName
        
                    if (element.data.tags?.containsKey("cluster-name")) {
                        def clusterName = element.data.tags["cluster-name"]
                        element.data.properties.put("nodeIdentifier", "urn:kubernetes:/${clusterName}:node/${nodeName}".toString())
                    }
        
                }
                def podIP = element.sourceProperties?.status?.podIP
                if (podIP != null) {
                    element.data['properties'].put('podIP', podIP)
                }
                def podPhase = element.sourceProperties?.status?.phase
                if (podPhase != null) {
                    element.data['properties'].put('podPhase', podPhase)
                }
                def containerStatuses = element.sourceProperties?.status?.containerStatuses
                if (containerStatuses != null) {
                    def totalContainers = containerStatuses.size()
                    def readyContainers = containerStatuses.findAll { it.ready }.size()
                    def readyContainersStatus = "UNKNOWN"
                    if (podPhase != null && podPhase == "Pending") {
                        readyContainersStatus = "DEVIATING"
                    } else if (podPhase != null && podPhase == "Running") {
                        readyContainersStatus = readyContainers == totalContainers ? "CLEAR" : "CRITICAL"
                    }
                    element.data['properties'].put('totalContainers', totalContainers.toString())
                    element.data['properties'].put('readyContainers', readyContainers.toString())
                    element.data['properties'].put('readyContainersStatus', readyContainersStatus)
                    def restarts = containerStatuses.collect { it.restartCount ?: 0 }.sum() ?: 0
                    element.data['properties'].put('restarts', restarts.toString())
                }
        
                // Add Owner info
                def ownerData = extractOwner(element)
                if (ownerData) {
                    element.data.properties.put("ownerName", "${ownerData.ownerName} (${ownerData.ownerKind})".toString())
                    element.data.properties.put("ownerIdentifier", ownerData.ownerIdentifier)
                    labels << ownerData.ownerKind + ':' + ownerData.ownerName
                }
        
                break
            case 'deployment':
                layer = 'urn:stackpack:common:layer:blueprints'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def deploymentStatus = element.sourceProperties?.status;
                if (deploymentStatus != null) {
                    def replicas = deploymentStatus.replicas != null ? deploymentStatus.replicas : 0
                    def readyReplicas = deploymentStatus.readyReplicas != null ? deploymentStatus.readyReplicas : 0
                    element.data['properties'].put('replicas', replicas.toString())
                    element.data['properties'].put('readyReplicas', readyReplicas.toString())
                    element.data['properties'].put('replicasStatus', readyReplicas == replicas ? "CLEAR" : "CRITICAL")
                }
        
                // Adds label with a resource name, it must be the same as children components to use topology aggregator function
                // e.g. to aggregate pods of stateful-set we need the same label for a StaefuleSet and children Pods
                labels << "${element.type.name}:${element.data.name}".toString()
        
                break
            case 'daemonset':
                layer = 'urn:stackpack:common:layer:blueprints'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def daemonsetStatus = element.sourceProperties?.status;
                if (daemonsetStatus != null) {
                    def numberAvailable = daemonsetStatus.numberAvailable != null ? daemonsetStatus.numberAvailable : 0
                    def desiredNumberScheduled = daemonsetStatus.desiredNumberScheduled != null ? daemonsetStatus.desiredNumberScheduled: 0
                    element.data['properties'].put('numberAvailable', numberAvailable.toString())
                    element.data['properties'].put('desiredNumberScheduled', desiredNumberScheduled.toString())
                    element.data['properties'].put('podsStatus', numberAvailable == desiredNumberScheduled ? "CLEAR" : "CRITICAL")
                }
        
                // Adds label with a resource name, it must be the same as children components to use topology aggregator function
                // e.g. to aggregate pods of stateful-set we need the same label for a StaefuleSet and children Pods
                labels << "${element.type.name}:${element.data.name}".toString()
        
                break
            case 'replicaset':
                layer = 'urn:stackpack:common:layer:blueprints'
                // Add Owner info
                def ownerData = extractOwner(element)
                if (ownerData) {
                    element.data.properties.put("ownerName", "${ownerData.ownerName} (${ownerData.ownerKind})".toString())
                    element.data.properties.put("ownerIdentifier", ownerData.ownerIdentifier)
                    labels << ownerData.ownerKind + ':' + ownerData.ownerName
                }
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def replicasetStatus = element.sourceProperties?.status;
                if (replicasetStatus != null) {
                    def replicas = replicasetStatus.replicas != null ? replicasetStatus.replicas : 0
                    def readyReplicas = replicasetStatus.readyReplicas != null ? replicasetStatus.readyReplicas : 0
                    element.data['properties'].put('replicas', replicas.toString())
                    element.data['properties'].put('readyReplicas', readyReplicas.toString())
                    element.data['properties'].put('replicasStatus', readyReplicas == replicas ? "CLEAR" : "CRITICAL")
                }
        
                // Adds label with a resource name, it must be the same as children components to use topology aggregator function
                // e.g. to aggregate pods of stateful-set we need the same label for a StaefuleSet and children Pods
                labels << "${element.type.name}:${element.data.name}".toString()
        
                break
            case 'statefulset':
                layer = 'urn:stackpack:common:layer:blueprints'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def statefulsetStatus = element.sourceProperties?.status;
                if (statefulsetStatus != null) {
                    def replicas = statefulsetStatus.replicas != null ? statefulsetStatus.replicas : 0
                    def readyReplicas = statefulsetStatus.readyReplicas != null ? statefulsetStatus.readyReplicas : 0
                    element.data['properties'].put('replicas', replicas.toString())
                    element.data['properties'].put('readyReplicas', readyReplicas.toString())
                    element.data['properties'].put('replicasStatus', readyReplicas == replicas ? "CLEAR" : "CRITICAL")
                }
        
                // Adds label with a resource name, it must be the same as children components to use topology aggregator function
                // e.g. to aggregate pods of stateful-set we need the same label for a StaefuleSet and children Pods
                labels << "${element.type.name}:${element.data.name}".toString()
        
                break
            case 'persistent-volume':
                layer = 'urn:stackpack:common:layer:storage'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def storageCapacity = element.sourceProperties?.spec?.capacity?.storage
                if (storageCapacity != null) {
                    // storage capacity in Gi
                    element.data['properties'].put('storageCapacity', K8sQuantity.parse(storageCapacity).formatGi())
                }
                def accessModes = element.sourceProperties?.spec?.accessModes
                if (accessModes) {
                    element.data['properties'].put('accessModes', accessModes.join(", "))
                }
                def reclaimPolicy = element.sourceProperties?.spec?.persistentVolumeReclaimPolicy
                if (reclaimPolicy) {
                    element.data['properties'].put('reclaimPolicy', reclaimPolicy)
                }
                def claimRef = element.sourceProperties?.spec?.claimRef
                if (claimRef && element.data.tags?.containsKey("cluster-name")) {
                    def clusterName = element.data.tags["cluster-name"]
                    labels << "persistent-volume-claim:" + claimRef.namespace + "/" + claimRef.name
                    element.data.properties.put("persistentVolumeClaimIdentifier", "urn:kubernetes:/${clusterName}:${claimRef.namespace}:persistent-volume-claim/${claimRef.name}".toString())
                    element.data.properties.put("namespace", claimRef.namespace)
                    element.data.properties.put("persistentVolumeClaimName", claimRef.name)
                }
                def storageClassName = element.sourceProperties?.spec?.storageClassName
                if (storageClassName) {
                    element.data['properties'].put('storageClassName', storageClassName)
                }
        
                if (element.data.tags?.containsKey("persistent-volume-node") && element.data.tags?.containsKey("cluster-name")) {
                    def clusterName = element.data.tags["cluster-name"]
                    def persistentVolumeNode = element.data.tags["persistent-volume-node"]
                    element.data.properties.put("nodeIdentifier", "urn:kubernetes:/${clusterName}:node/${persistentVolumeNode}".toString())
                }
                break
            case 'persistent-volume-claim':
                layer = 'urn:stackpack:common:layer:storage'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
        
                def volumeName = element.sourceProperties?.spec?.volumeName
                if (volumeName && element.data.tags?.containsKey("cluster-name")) {
                    def clusterName = element.data.tags["cluster-name"]
                    labels << "persistent-volume:" + volumeName
                    element.data.properties.put("volumeNameIdentifier", "urn:kubernetes:/${clusterName}:persistent-volume/${volumeName}".toString())
                }
        
                def storageCapacity = element.sourceProperties?.status?.capacity?.storage
                if (storageCapacity != null) {
                    // storage capacity in Gi
                    element.data['properties'].put('storageCapacity', K8sQuantity.parse(storageCapacity).formatGi())
                }
        
                def accessModes = element.sourceProperties?.status?.accessModes
                if (accessModes) {
                    element.data['properties'].put('accessModes', accessModes.join(", "))
                }
        
                def storageClassName = element.sourceProperties?.spec?.storageClassName
                if (storageClassName) {
                    element.data['properties'].put('storageClassName', storageClassName)
                }
        
                break
            case 'volume-source':
                layer = 'urn:stackpack:common:layer:storage'
                break
            case 'volume':
                layer = 'urn:stackpack:common:layer:storage'
                break
            case 'cronjob':
                layer = 'urn:stackpack:common:layer:blueprints'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
        
                def schedule = element.sourceProperties?.spec?.schedule
                if (schedule) {
                    element.data['properties'].put('schedule', schedule)
                }
                def suspended = element.sourceProperties?.spec?.suspend
                if (suspended != null) {
                    element.data['properties'].put('suspended', suspended ? "yes" : "no")
                }
                String lastScheduleTime = element.sourceProperties?.status?.lastScheduleTime
                if (lastScheduleTime) {
                    element.data['properties'].put('lastScheduleTime', lastScheduleTime)
                }
        
                // Adds label with a resource name, it must be the same as children components to use topology aggregator function
                // e.g. to aggregate pods of stateful-set we need the same label for a StaefuleSet and children Pods
                labels << "${element.type.name}:${element.data.name}".toString()
        
                break
        
            case 'job':
                layer = 'urn:stackpack:common:layer:blueprints'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def ownerData = extractOwner(element)
                if (ownerData) {
                    element.data.properties.put("ownerName", "${ownerData.ownerName} (${ownerData.ownerKind})".toString())
                    element.data.properties.put("ownerIdentifier", ownerData.ownerIdentifier)
                    labels << ownerData.ownerKind + ':' + ownerData.ownerName
                }
        
                def completions = element.sourceProperties?.spec?.completions
                if (completions != null) {
                    element.data['properties'].put('completions', completions)
                }
                def succeeded = element.sourceProperties?.status?.succeeded
                if (succeeded != null) {
                    element.data['properties'].put('succeeded', succeeded)
                }
        
                String startTime = element.sourceProperties?.status?.startTime
                if (startTime) {
                    element.data['properties'].put('startTime', startTime)
                }
                String completionTime = element.sourceProperties?.status?.completionTime
                if (completionTime) {
                    element.data['properties'].put('completionTime', completionTime)
                }
        
                // Adds label with a resource name, it must be the same as children components to use topology aggregator function
                // e.g. to aggregate pods of stateful-set we need the same label for a StaefuleSet and children Pods
                labels << "${element.type.name}:${element.data.name}".toString()
        
                break
            case 'ingress':
                layer = 'urn:stackpack:common:layer:application-load-balancers'
                break
            case 'configmap':
                layer = 'urn:stackpack:common:layer:storage'
        
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
        
                def data = element.sourceProperties?.data
                if (data) {
                    element.data['properties'].put('dataCount', data.size())
                }
        
                break
            case 'secret':
                def redactedMessage = "<redacted>"
                def annotationsToObfuscate = ["kubectl.kubernetes.io/last-applied-configuration", "openshift.io/token-secret.value"]
                layer = 'urn:stackpack:common:layer:storage'
        
                annotationsToObfuscate.forEach { annotationName ->
                    if (element.sourceProperties?.metadata?.annotations && element.sourceProperties?.metadata?.annotations[annotationName]) {
                        element.sourceProperties?.metadata?.annotations[annotationName] = redactedMessage
                    }
                }
        
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                if (element.sourceProperties?.type) {
                    secretType = element.sourceProperties?.type
                    element.data['properties'].put('secretType', secretType)
                    switch (secretType) {
                        case "kubernetes.io/tls":
                            labels << "secret-type:certificate"
                            if (element.data.containsKey("certificateExpiration")) {
                                element.data['properties'].put('certificateExpiration', element.data["certificateExpiration"])
                            }
        
                            break
                        case "kubernetes.io/dockerconfigjson":
                            labels << "secret-type:docker-config"
                            break
                        case "kubernetes.io/dockercfg":
                            labels << "secret-type:docker-config"
                            break
                        case "kubernetes.io/service-account-token":
                            labels << "secret-type:service-account-token"
                            break
                        case "Opaque":
                            labels << "secret-type:opaque"
                            break
                        case "helm.sh/release.v1":
                            labels << "secret-type:helm-release"
                            break
                        default:
                            break
                    }
                }
                break
            case 'cluster':
                layer = 'urn:stackpack:common:layer:application-load-balancers'
                break
            case 'namespace':
                layer = 'urn:stackpack:common:layer:applications'
                def creationTimestamp = element.sourceProperties?.metadata?.creationTimestamp
                if (creationTimestamp != null) {
                    element.data['properties'].put('creationTimestamp', creationTimestamp)
                }
                def podPhase = element.sourceProperties?.status?.phase
                if (podPhase != null) {
                    element.data['properties'].put('namespacePhase', podPhase)
                }
        
                break
            default:
                break
        }
        
        element.data.put('layer', layer)
        
        if(element.data.containsKey("tags") && element.data.tags.containsKey("cluster-name")) {
          domain = element.data.tags['cluster-name']
        }
        else {
            domain = element.data.name
            labels << 'cluster-name:'+domain
        }
        
        element.data.put('labels', labels)
        element.data.put("domain", domain)
        
        def status = element.sourceProperties?.status
        if (status != null) {
            element.status = status
            element.sourceProperties.remove('status')
        }
        
        if (element.sourceProperties?.metadata?.resourceVersion != null) {
            element.sourceProperties?.metadata?.remove('resourceVersion')
        }
        
        element
timestamp: 2025-02-18T19:20:38.905815Z[Etc/UTC]
